// Generated by gencpp from file smart_cargo_package/state_monitor.msg
// DO NOT EDIT!


#ifndef SMART_CARGO_PACKAGE_MESSAGE_STATE_MONITOR_H
#define SMART_CARGO_PACKAGE_MESSAGE_STATE_MONITOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smart_cargo_package
{
template <class ContainerAllocator>
struct state_monitor_
{
  typedef state_monitor_<ContainerAllocator> Type;

  state_monitor_()
    : system_state()
    , door_state()
    , handler_state()
    , docking_state()
    , type()  {
    }
  state_monitor_(const ContainerAllocator& _alloc)
    : system_state(_alloc)
    , door_state(_alloc)
    , handler_state(_alloc)
    , docking_state(_alloc)
    , type(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _system_state_type;
  _system_state_type system_state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _door_state_type;
  _door_state_type door_state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _handler_state_type;
  _handler_state_type handler_state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _docking_state_type;
  _docking_state_type docking_state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::smart_cargo_package::state_monitor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smart_cargo_package::state_monitor_<ContainerAllocator> const> ConstPtr;

}; // struct state_monitor_

typedef ::smart_cargo_package::state_monitor_<std::allocator<void> > state_monitor;

typedef boost::shared_ptr< ::smart_cargo_package::state_monitor > state_monitorPtr;
typedef boost::shared_ptr< ::smart_cargo_package::state_monitor const> state_monitorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smart_cargo_package::state_monitor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smart_cargo_package::state_monitor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smart_cargo_package::state_monitor_<ContainerAllocator1> & lhs, const ::smart_cargo_package::state_monitor_<ContainerAllocator2> & rhs)
{
  return lhs.system_state == rhs.system_state &&
    lhs.door_state == rhs.door_state &&
    lhs.handler_state == rhs.handler_state &&
    lhs.docking_state == rhs.docking_state &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smart_cargo_package::state_monitor_<ContainerAllocator1> & lhs, const ::smart_cargo_package::state_monitor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smart_cargo_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::smart_cargo_package::state_monitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_cargo_package::state_monitor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_cargo_package::state_monitor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_cargo_package::state_monitor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_cargo_package::state_monitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_cargo_package::state_monitor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smart_cargo_package::state_monitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "155a94a5ff2117e15f117d9248317262";
  }

  static const char* value(const ::smart_cargo_package::state_monitor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x155a94a5ff2117e1ULL;
  static const uint64_t static_value2 = 0x5f117d9248317262ULL;
};

template<class ContainerAllocator>
struct DataType< ::smart_cargo_package::state_monitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smart_cargo_package/state_monitor";
  }

  static const char* value(const ::smart_cargo_package::state_monitor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smart_cargo_package::state_monitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string system_state  # smart_cargo 현재 동작 상태\n"
"string door_state    # 적재함 Door 현재 동작 상태\n"
"string handler_state # Handler 현재 동작 상태\n"
"string docking_state # IF_docking Message 수신 상태\n"
"string type          # Message Object\n"
;
  }

  static const char* value(const ::smart_cargo_package::state_monitor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smart_cargo_package::state_monitor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.system_state);
      stream.next(m.door_state);
      stream.next(m.handler_state);
      stream.next(m.docking_state);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_monitor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smart_cargo_package::state_monitor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smart_cargo_package::state_monitor_<ContainerAllocator>& v)
  {
    s << indent << "system_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.system_state);
    s << indent << "door_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.door_state);
    s << indent << "handler_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.handler_state);
    s << indent << "docking_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.docking_state);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMART_CARGO_PACKAGE_MESSAGE_STATE_MONITOR_H

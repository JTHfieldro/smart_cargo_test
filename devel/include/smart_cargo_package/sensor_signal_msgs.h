// Generated by gencpp from file smart_cargo_package/sensor_signal_msgs.msg
// DO NOT EDIT!


#ifndef SMART_CARGO_PACKAGE_MESSAGE_SENSOR_SIGNAL_MSGS_H
#define SMART_CARGO_PACKAGE_MESSAGE_SENSOR_SIGNAL_MSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smart_cargo_package
{
template <class ContainerAllocator>
struct sensor_signal_msgs_
{
  typedef sensor_signal_msgs_<ContainerAllocator> Type;

  sensor_signal_msgs_()
    : time_stamp()
    , index(0)
    , value(0)  {
    }
  sensor_signal_msgs_(const ContainerAllocator& _alloc)
    : time_stamp()
    , index(0)
    , value(0)  {
  (void)_alloc;
    }



   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef int32_t _index_type;
  _index_type index;

   typedef int32_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_signal_msgs_

typedef ::smart_cargo_package::sensor_signal_msgs_<std::allocator<void> > sensor_signal_msgs;

typedef boost::shared_ptr< ::smart_cargo_package::sensor_signal_msgs > sensor_signal_msgsPtr;
typedef boost::shared_ptr< ::smart_cargo_package::sensor_signal_msgs const> sensor_signal_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator1> & lhs, const ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.time_stamp == rhs.time_stamp &&
    lhs.index == rhs.index &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator1> & lhs, const ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smart_cargo_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c7a1b51f4e21ef105c7e6881304d350";
  }

  static const char* value(const ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c7a1b51f4e21ef1ULL;
  static const uint64_t static_value2 = 0x05c7e6881304d350ULL;
};

template<class ContainerAllocator>
struct DataType< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smart_cargo_package/sensor_signal_msgs";
  }

  static const char* value(const ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time time_stamp  # Message 발행 시간 (ros::Time)\n"
"int32 index       # DI/DO Signal Index Enum\n"
"int32 value      # Signal Value\n"
;
  }

  static const char* value(const ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.index);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_signal_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smart_cargo_package::sensor_signal_msgs_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMART_CARGO_PACKAGE_MESSAGE_SENSOR_SIGNAL_MSGS_H
